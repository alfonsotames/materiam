<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="jakarta.faces.facelets"
                template="./gizmotemplate.xhtml"
                xmlns:h="jakarta.faces.html"
                xmlns:p="primefaces"
                xmlns:f="jakarta.faces.core">


    <ui:define name="headscripts">
        
   <script crossorigin="anonymous" type="importmap">
        {
            "imports": {
                "three": "https://unpkg.com/three@0.180.0/build/three.module.js",
                "three/addons/": "https://unpkg.com/three@0.180.0/examples/jsm/",
                "three-viewport-gizmo": "https://unpkg.com/three-viewport-gizmo@2.2.0/dist/three-viewport-gizmo.js"
                }
        }
    </script>        
        
   <script type="module">

        import * as THREE from 'three';
        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
        import { GLTFLoader } from "three/addons/loaders/GLTFLoader.js";
        import { ViewportGizmo } from "three-viewport-gizmo";

        const container = document.getElementById("viewport");

        const aspect = window.innerWidth / window.innerHeight;

        //Scene setup
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0x333333);
        
        // Define the size of the orthographic frustum
        const frustumSize = 3.5;

        // Camera setup
        const camera = new THREE.OrthographicCamera(
          (-frustumSize * aspect) / 2,  // left
          (frustumSize * aspect) / 2,   // right
          frustumSize / 2,              // top
          -frustumSize / 2,             // bottom
          0.1,                          // near
          1000                          // far
        );

        // Match position from perspective camera
        camera.position.set(5, 5, 5);
        camera.lookAt(0, 0, 0);
        

        //Light Setup
        const light1 = new THREE.DirectionalLight(0xffffff, 1.5);
        light1.position.set(5, 5, 5);
        scene.add(light1);

        // Fill light (opposite side)
        const light2 = new THREE.DirectionalLight(0xffffff, 1.5);
        light2.position.set(-5, -5, -5);
        scene.add(light2);

        // Fill light (opposite side)
        const light3 = new THREE.DirectionalLight(0xffffff, 2);
        light3.position.set(-5, 5, -5);
        scene.add(light3);
        
        // Fill light (opposite side)
        const light4 = new THREE.DirectionalLight(0xffffff, 1.5);
        light4.position.set(5, -5, 5);
        scene.add(light4);  
        
        // Add some ambient to soften contrast
        const ambient = new THREE.AmbientLight(0xffffff, 15);
        scene.add(ambient);
        
        
        
        const grid = new THREE.GridHelper(10, 10, 0x111111, 0x111111);
        scene.add(grid);

        // Renderer setup
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setAnimationLoop(animation);
        container.appendChild(renderer.domElement);
        
        

      // Init Gizmo with OrbitControls
      let gizmo = new ViewportGizmo(camera, renderer, {
        type: "sphere",
        size: Math.round(Math.min(50, 50) * 0.8),
        placement: "center-center",
      });
      gizmo.attachControls(new OrbitControls(camera, renderer.domElement));

      // Optional. Set the target
      gizmo.target.set(0, 3, 0);
      camera.lookAt(gizmo.target);







        // animation
        function animation(time) {
          renderer.render(scene, camera);
          gizmo.render();
        }
      



      // GLB loader
      const loader = new GLTFLoader();


      
        window.onresize = () => {
          //camera.aspect = window.innerWidth / window.innerHeight;
          //camera.updateProjectionMatrix();
          renderer.setSize(window.innerWidth/1.5, window.innerHeight/1.5);
          gizmo.update();
        };
        
        
       
             
        // Load GLB
        function loadGLB(cadfile, persid) {
            clearAllMeshes(scene);
            console.log("Attempting to load GLB, cadfile: "+cadfile+" persid: "+persid);
            var url = '#{request.contextPath}/glbserver?cadfile='+cadfile+'&amp;persid='+persid;
            console.log('url: '+url);
            loader.load(
                // Replace with your .glb file path
                url,
                (gltf) => {
                    scene.add(gltf.scene);
                    // Center and scale the model
                    const box = new THREE.Box3().setFromObject(gltf.scene);
                    const center = box.getCenter(new THREE.Vector3());
                    
                    const size = box.getSize(new THREE.Vector3());
                    const maxDim = Math.max(size.x, size.y, size.z);
                    const scale = 2.0 / maxDim;
                    gltf.scene.scale.set(scale, scale, scale);
                    gltf.scene.position.sub(center.multiplyScalar(scale));
                },
                (xhr) => {
                    console.log((xhr.loaded / xhr.total * 100) + '% loaded');
                },
                (error) => {
                    console.error('Error loading GLB:', error);
                }
            );
        }

        function clearAllMeshes(scene) {
            const toRemove = [];

            scene.traverse((obj) => {
              if (obj.isMesh) {
                // Dispose geometry and material(s)
                if (obj.geometry) obj.geometry.dispose();

                if (obj.material) {
                  if (Array.isArray(obj.material)) {
                    obj.material.forEach((m) => m.dispose());
                  } else {
                    obj.material.dispose();
                  }
                }

                toRemove.push(obj); // mark for removal
              }
            });

            // Remove after traversal to avoid modifying the tree while iterating
            toRemove.forEach((mesh) => {
              if (mesh.parent) {
                mesh.parent.remove(mesh);
              }
            });
        }
      
      
      function getGizmoConfig() {
        // Gizmo URL type `?type=sphere|cube|rounded-cube`
        const urlParams = new URLSearchParams(window.location.search);
        const type = urlParams.get("type") || "sphere";

        if (type === "sphere") return {};

        if (type === "rounded-cube") {
          const faceConfig = {
            color: 0x444444,
            labelColor: 0xffffff,
            hover: {
              color: 0x4bac84,
            },
          };
          const edgeConfig = {
            color: 0x555555,
            opacity: 1,
            hover: {
              color: 0x4bac84,
            },
          };
          const cornerConfig = {
            ...faceConfig,
            color: 0x444444,
            hover: {
              color: 0x4bac84,
            },
          };
          return {
            type,
            corners: cornerConfig,
            edges: edgeConfig,
            right: faceConfig,
            top: faceConfig,
            front: faceConfig,
            left: faceConfig,
            bottom: faceConfig,
            back: faceConfig,
          }
        }

        const darkColors = {
          color: 0x333333,
          labelColor: 0xdddddd,
          hover: {
            color: 0x4bac84,
            labelColor: 0xffffff,
          },
        };

        const darkBackground = {
          color: 0x444444,
          hover: { color: 0x444444 },
        };

        const darkCubeConfig = {
          type,
          background: darkBackground,
          corners: darkColors,
          edges: darkColors,
          right: darkColors,
          top: darkColors,
          front: darkColors,
        };

        return darkCubeConfig;
      }
      
      
      window.loadGLB = loadGLB;
      window.clearAllMeshes = clearAllMeshes;
      
    </script> 
        
    </ui:define>
    <ui:define name="top">
        
    </ui:define>

    <ui:define name="content">
        <div id="viewport"/>
                <div style="
                    width: 100%;
                    display: grid;
                    grid-template-columns: repeat(2, 1fr); /* Creates 2 columns of equal width */
                    grid-template-rows: auto; /* Allows row height to adjust to content */
                    justify-content: center; /* Centers the grid horizontally within its parent */
                    align-items: start; /* Centers items vertically within their cells */
                    ">
                        
                    <div style="color: white; border: 1px solid red;">hole</div>
                    <div style="width: 100%;">
                        <div style="background-color: white; color: black;"><span style="margin-left: 10px; font-family: Materiam; font-size: 24px;">Project #{projectcontroller.project.name}</span></div>
                        <div style="background-color: grey; color: white; padding-left: 10px;">Bill of Materials</div>
                        <div style="color: white; overflow-y: scroll; max-height: 490px; ">
                            <h:form id="form">
                                <p:dataView var="part" value="#{projectcontroller.parts}" rows="12" paginator="false"
                                            rowsPerPageTemplate="6,12,16"
                                            paginatorTemplate="{CurrentPageReport} {FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} {RowsPerPageDropdown}"
                                            gridIcon="pi pi-th-large" listIcon="pi pi-bars">
                                    
                                    <p:dataViewListItem>
                                        
                                        <div style="width: 100%;
                                            display: grid;
                                            grid-template-columns: repeat(2, 1fr); /* Creates 2 columns of equal width */
                                            grid-template-rows: auto; /* Allows row height to adjust to content */
                                            justify-content: center; /* Centers the grid horizontally within its parent */
                                            align-items: start; /* Centers items vertically within their cells */">
                                            <div style="margin: 10px; box-shadow: 1px 1px 4px 0px rgba(0, 0, 0, 0.2); width: 150px;">
                                                <img style="width:150px; cursor: pointer;"
                                                     src="#{request.contextPath}/imageserver?cadfile=#{part.cadfile.id}&amp;persid=#{part.persid}"
                                                     onclick="loadGLB(#{part.cadfile.id},'#{part.persid}');"
                                                     />
                                            </div>                                                     
                                            <div style="margin: 10px;">
                                                <div style="font-size: 14px;"><B>#{part.name}</B></div>
                                                <div class="product-description">Thickness: #{part.gauge} mm</div>
                                                <div>#{part.comments}</div>
                                                                                                <div>
                                                    <h:outputText style="font-weight: bold;" value="#{((part.flatObbLength/1000)*(part.flatObbWidth/1000)*(part.gauge/1000)*7850)*1.17}" styleClass="product-price">
                                                        <f:convertNumber currencySymbol="USD$" type="currency"/>
                                                    </h:outputText></div>
                                                <p:commandButton type="button"
                                                                 value="Add To Cart"
                                                                 icon="pi pi-shopping-cart"
                                                                 >
                                                </p:commandButton>
                                            </div>

                                        </div>
                                    </p:dataViewListItem>
                                </p:dataView>
                            </h:form>
            
                        </div>
                    </div>
                </div>
        
            
                       

    

    </ui:define>

    <ui:define name="bottom">
        
    </ui:define>

</ui:composition>
